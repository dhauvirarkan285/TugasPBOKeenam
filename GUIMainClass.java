/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tugaspert6;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author RAISSA
 */
public class GUIMainClass extends javax.swing.JFrame {

    /**
     * Creates new form GUIMainClass
     */
    public GUIMainClass() {
        initComponents();
           // pasang listener setelah komponen dibuat
        btnInsert.addActionListener((ActionEvent e) -> btnInsertActionPerformed(e));
        btnUpdate.addActionListener((ActionEvent e) -> btnUpdateActionPerformed(e));
        btnDelete.addActionListener((ActionEvent e) -> btnDeleteActionPerformed(e));

        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        loadData();  // supaya tabel langsung terisi saat form dibuka
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */


    private void loadData() {
    try (Connection c = KoneksiDB.getConnection()) {
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"Kode BPS", "Nama Kabupaten", "Pusat Pemerintahan", "Luas", "Jumlah Penduduk"}, 0);
        Statement st = c.createStatement();
        ResultSet rs = st.executeQuery("SELECT * FROM kabupaten");
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("kode_bps"),
                rs.getString("nama_kabupaten"),
                rs.getString("pusat_pemerintahan"),
                rs.getDouble("luas"),             // <-- ganti dari luas_wilayah
                rs.getInt("jumlah_penduduk")      // tetap sama
            });
        }
        jTable1.setModel(model);
    } catch (Exception e) {
        e.printStackTrace();
    }
}


    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnInsert.setText("Insert");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(btnDelete))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsert)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = jTable1.getSelectedRow();  // ✅ ganti tabelKabupaten → jTable1
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih dulu data yang mau diupdate");
        return;
    }

    // Buka dialog UpdateData
    UpdateData upd = new UpdateData(this, true);

    // Isi form dengan data dari tabel
    upd.getTxtKodeBPS().setText(jTable1.getValueAt(selectedRow, 0).toString());
    upd.getTxtNamaKabupaten().setText(jTable1.getValueAt(selectedRow, 1).toString());
    upd.getTxtPusatPemerintahan().setText(jTable1.getValueAt(selectedRow, 2).toString());
    upd.getTxtLuasWilayah().setText(jTable1.getValueAt(selectedRow, 3).toString());
    upd.getTxtJumlahPenduduk().setText(jTable1.getValueAt(selectedRow, 4).toString());

    // Tampilkan dialog
    upd.setVisible(true);

    // Ambil data hasil edit
    String[] data = upd.getUpdatedData();
    if (data != null) {
        try (Connection conn = KoneksiDB.getConnection()) {
            String sql = "UPDATE kabupaten " +
                         "SET nama_kabupaten=?, pusat_pemerintahan=?, luas_wilayah=?, jumlah_penduduk=? " +
                         "WHERE kode_bps=?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1, data[1]);
            pst.setString(2, data[2]);
            pst.setDouble(3, Double.parseDouble(data[3]));
            pst.setInt(4, Integer.parseInt(data[4]));
            pst.setString(5, data[0]);

            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Data berhasil diupdate!");
            loadData();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error update: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {
    InsertData insertDialog = new InsertData(this, true);
    insertDialog.setVisible(true);

    String[] data = insertDialog.getDataKabupaten();
    if (data != null) {
        try (Connection conn = KoneksiDB.getConnection()) {
            String sql = "INSERT INTO kabupaten (kode_bps, nama_kabupaten, pusat_pemerintahan, luas, jumlah_penduduk) "
                       + "VALUES (?, ?, ?, ?, ?)";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1, data[0]);
            pst.setString(2, data[1]);
            pst.setString(3, data[2]);
            pst.setDouble(4, Double.parseDouble(data[3]));
            pst.setInt(5, Integer.parseInt(data[4]));
            pst.executeUpdate();

            JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error insert: " + e.getMessage());
        }
        loadData(); // refresh JTable
    }
}

        private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                          
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih dulu data yang mau dihapus");
        return;
    }

    String kodeBPS = jTable1.getValueAt(selectedRow, 0).toString();
    int confirm = JOptionPane.showConfirmDialog(this, 
            "Yakin hapus data dengan kode BPS: " + kodeBPS + "?", 
            "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        try (Connection conn = KoneksiDB.getConnection()) {
            String sql = "DELETE FROM kabupaten WHERE kode_bps=?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1, kodeBPS);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
            loadData();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error delete: " + e.getMessage());
        }
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
public static void main(String[] args) {
    java.awt.EventQueue.invokeLater(() -> {
        GUIMainClass frame = new GUIMainClass();
        frame.setVisible(true);
    });
}

    }

